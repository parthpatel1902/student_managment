<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
    <%- include('../partials/navbar.ejs') %>

    <div class="container">
        <div class="row">
            <div class="col-md-12 mt-3" id="resultTable">
            </div>
        </div>
    </div>
     <!-- Edit Modal -->
     <div class="modal" id="myModal">
        <div class="modal-dialog">
          <div class="modal-content">
  
            <!-- Modal Header -->
            <div class="modal-header">
              <h4 class="modal-title">Update Student Name :- <span id="nameUpdate"></span></h4>
              <button type="button" class="btn-close" data-bs-dismiss="modal" onclick="realoadingPage()"></button>
            </div>
            
            <!-- Modal body -->
            <div class="modal-body">
              <div class="mb-3">
                <input type="hidden" name="" id="id_update">
                <label for="name" class="form-label">Name</label>
                <input
                  type="text"
                  class="form-control"
                  id="name"
                  name="name"
                  onkeydown="restrictInputName(event)"
                  placeholder="enter the name"
                  onkeyup="validateName()"
                  onblur="validateName()"
                  maxlength="20"
                />
                <div id="nameError" class="text-danger"></div>
              </div>
              <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input
                  type="email"
                  class="form-control"
                  id="email"
                  name="email"
                  onkeyup="validateEmail()"
                  onblur="validateEmail()"
                  onkeydown="validateEmail()"
                  placeholder="enter the email"
                />
                <div id="emailError" class="text-danger"></div>
              </div>
              <div class="mb-3">
                <label for="mobile" class="form-label">Mobile</label>
                <input
                  type="text"
                  class="form-control"
                  id="mobile"
                  name="mobile"
                  onkeyup="validateMobile()"
                  onkeydown="restrictInput(event)"
                  onblur="validateMobile()"
                  maxlength="10"
                  placeholder="enter the mobile"
                />
                <div id="mobileError" class="text-danger"></div>
              </div>
              <div class="mb-3">
                <label for="bloodgroup" class="form-label"> Bloodgroup </label>
                <select
                  class="form-select"
                  id="bloodgroup"
                  onchange="validateBloodgroup()"
                >
                  <option value="">Select Bloodgroup</option>
                  <option value="A+">A+</option>
                  <option value="A-">A-</option>
                  <option value="AB+">AB+</option>
                  <option value="AB-">AB-</option>
                  <option value="B+">B+</option>
                  <option value="B-">B+</option>
                  <option value="O+">O+</option>
                  <option value="O-">O-</option>
                </select>
                <div id="bloodgroupError" class="text-danger"></div>
              </div>
              <div class="mb-3">
                <label for="gender" class="form-label">Select Gender:</label
                ><br />
                <input
                  class="form-check-input"
                  type="radio"
                  value="male"
                  name="gender"
                  id="male"
                  onchange="validateGender()"
                />
                <label class="form-check-label" for="male">Male</label>
                <input
                  class="form-check-input"
                  type="radio"
                  value="female"
                  name="gender"
                  id="female"
                  onchange="validateGender()"
                />
                <label class="form-check-label" for="female">Female</label>
                <div id="genderError" class="text-danger"></div>
              </div>
              <div class="mb-3">
                <label for="bdate" class="form-label">Select Birthdate :- </label>
                <input
                  type="date"
                  id="bdate"
                  name="bdate"
                  min="1947-01-01"
                  onkeypress="validateBirthdate()"
                  style="border: 0.5px solid rgb(224, 219, 219);border-radius: 5px;width: 130px;padding: 5px;"
                />
                <div id="bdateError" class="text-danger"></div>
              </div>
              <div class="mb-3">
                <label for="height" class="form-label">Height (in feet)</label>
                <input
                  type="text"
                  class="form-control"
                  id="height"
                  name="height"
                  maxlength="3"
                  placeholder="enter height in feet e.x 3.5"
                  onkeydown="restrictInputHegiht(event)"
                  onchange="validateHeight()"
                  onkeyup="validateHeight()"
                />
                <div id="heightError" class="text-danger"></div>
              </div>
              <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input
                  type="password"
                  class="form-control"
                  id="password"
                  name="password"
                  onchange="validatePassword()"
                  onkeyup="validatePassword()"
                  onkeydown="validatePassword()"
                  placeholder="enter the password"
                  />
                  <button class="btn btn-outline-secondary mt-2  ml-2" type="button" id="togglePassword">
                    view
                </button>                
                <div id="passwordError" class="text-danger"></div>
              </div>
              <button
                onclick="handleUpdate(event)"
                class="btn btn-primary"
              >
                Update Student
              </button>
            </div>
  
          </div>
        </div>
      </div>

      <!-- view Modal -->
      <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">View Record</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div id="viewRec">

              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>
      <i class="fas fa-edit"></i>
</body>

<script>
      displayRecord();

      const togglePasswordButton = document.getElementById('togglePassword');
      const passwordField = document.getElementById('password');

      togglePasswordButton.addEventListener('click', function() {
          const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
          passwordField.setAttribute('type', type);
          togglePasswordButton.innerText = type == 'password' ? 'view' : 'hide';
      });

      function realoadingPage(){
        location.replace("/view");
      }

      function deleteRecord(item){
          Swal.fire({
            title: `Do you want to delete ${item.name}'s name record?`,
            confirmButtonText: "Delete",
            showCancelButton: true,
          }).then((result) => {
            if (result.isConfirmed) {
              Swal.fire("Deleted!", "", "success");
              const apiData = new FormData();
              apiData.append('id', item.id);
              fetch('/removestud', {
                  method: 'POST',
                  body: apiData,
              })
              .then(response => response.json())
              .then(resData => {
                  if(resData.success == true){
                    Swal.fire({
                      title: "success!",
                      text: "Student is Removed",
                      icon: "success"
                    }).then((data)=>{
                      if(data.isConfirmed){
                        location.replace("/view"); 
                      }
                    })
                  }
              })
              .catch(error => {
                  console.error('Error:', error);
              });
            } else if (result.isDenied) {
              Swal.fire("Not Deleted", "", "info");
            }
          });
          
        }
        
      function viewRecord(data){
        // viewRec

        var date = new Date(data.bdate);
        var day = date.getUTCDate();
        var month = date.getUTCMonth() + 1; 
        var year = date.getUTCFullYear();
        day = day < 10 ? "0" + day : day;
        month = month < 10 ? "0" + month : month;
        var formattedDate = day + "-" + month + "-" + year;


        const result = `<p> Name  : ${data.name} </p><hr><p>Email : ${data.email}</p><hr><p>Bloodgroup : ${data.bloodgroup}</p><hr><p> Gender : ${data.gender}</p><hr><p> Birthdate : ${formattedDate}</p><hr><p> Height : ${data.height}</p><hr><p> Password : ${data.password}</p>`


        document.getElementById('viewRec').innerHTML = result;
      }

      function displayRecord(){
          fetch("/displaystud").then(response => response.json()).then((data) => {

              if(data[0] == null){
                document.getElementById('resultTable').className = 'text-center mt-5';
                document.getElementById('resultTable').innerHTML = '<h1>No data found</h1>';

              }else{
                  let output = "<table class='table table-dark'><thead><th>No.</th><th>Name</th><th>Email</th><th>Mobile</th><th>Bloodgroup</th><th>Gender</th><th>Birthdate</th><th>Height</th><th>Password</th><th>View</th><th>Update</th><th>Delete</th></thead><tbody>";
                  let i=1;
                  data.map((item)=>{
                      const updateData = {
                        id:item._id,
                        name:item.name,
                        email:item.email,
                        mobile:item.mobile,
                        bloodgroup:item.bloodgroup,
                        gender:item.gender,
                        bdate:item.bdate,
                        height:item.height,
                        password:item.password
                      }

                      var date = new Date(item.bdate);
                      var day = date.getUTCDate();
                      var month = date.getUTCMonth() + 1; 
                      var year = date.getUTCFullYear();
                      day = day < 10 ? "0" + day : day;
                      month = month < 10 ? "0" + month : month;
                      var formattedDate = day + "-" + month + "-" + year;

                      const deleteData = {
                        id:item._id,
                        name:item.name
                      }

                      output +=`<tr><td>${i++}</td><td>${item.name}</td><td>${item.email}</td><td>${item.mobile}</td><td>${item.bloodgroup}</td><td>${item.gender}</td><td>${formattedDate}</td><td>${item.height}</td><td>${item.password}</td><td><button onclick='viewRecord(${JSON.stringify(updateData)})' class='btn btn-success'  data-bs-toggle="modal" data-bs-target="#exampleModal">View</button></td><td><button onclick='updateRecord(${JSON.stringify(updateData)})' class='btn btn-primary'  data-bs-toggle="modal" data-bs-target="#myModal">update</button></td><td><button class='btn btn-danger' onclick='deleteRecord(${JSON.stringify(deleteData)})'>Delete</button></td></tr>`;
                  })
                  output += "</tbody></table>";
                  document.getElementById("resultTable").innerHTML = output;
              }

              
          })
        }

      function updateRecord(data){
          document.getElementById('nameUpdate').innerText = data.name;
          document.getElementById('name').value = data.name;
          document.getElementById('email').value = data.email;
          document.getElementById('mobile').value = data.mobile;
          document.getElementById('bloodgroup').value = data.bloodgroup;
          document.getElementById(data.gender).setAttribute('checked', 'true');
          let datePart = data.bdate.substring(0, 10);
          document.getElementById('bdate').value=datePart;
          document.getElementById('height').value = data.height;
          document.getElementById('password').value = data.password;
          document.getElementById('id_update').value = data.id;
        }

      pageLoaded();
      function pageLoaded() {
        const date = new Date();
        const year = date.getFullYear() - 18;
        document.getElementById("bdate").max = `${year}-01-01`;
      }

      function validateName() {
        const name = document.getElementById("name").value;
        const nameError = document.getElementById("nameError");

        if (name === "") {
          nameError.innerHTML = "Name is Required.";
          document.getElementById('name').style.border = "2px solid red";
        } else if (name.length < 3 || !/^[a-zA-Z]+$/.test(name)) {
          nameError.textContent =
            "Name must be at least 3 characters long and contain only letters.";
            document.getElementById("name").style.border = "2px solid red";
        } else {
          nameError.textContent = "";
          document.getElementById("name").style.border = "";
        }
      }

      function validateEmail() {
        const emailInput = document.getElementById("email");
        const id = document.getElementById("email");
        const emailError = document.getElementById("emailError");
        const email = emailInput.value.trim();

        if (email === "") {
            emailError.textContent = "Email is required.";
            document.getElementById('email').style.border = "2px solid red";
        } else if (!/\S+@\S+\.\S+/.test(email)) {
            emailError.textContent = "Invalid email format.";
            document.getElementById('email').style.border = "2px solid red";
        } else {
            try {
              const id = document.getElementById('id_update').value;
               fetch(`/checkavl?email=${encodeURIComponent(email)}&id=${encodeURIComponent(id)}`).then((response) => {
                   response.json().then((data) => {
                       if (data.available) {
                          emailError.textContent = "This email address is already in use.";
                          emailInput.style.border = "2px solid red";
                       } else {
                          emailError.textContent = ""
                          emailInput.style.border = "";
                       }
                   })
                }).catch((err) => console.log(err));
            } catch (error) {
                console.error('Error checking email availability:', error);
            }
        }
      }

      function validateMobile() {
        const mobile = document.getElementById("mobile").value;
        const mobileError = document.getElementById("mobileError");

        if (mobile == "") {
          mobileError.textContent = "Mobile is required";
          document.getElementById('mobile').style.border = "2px solid red";
        } else if (!/^\d{10}$/.test(mobile)) {
          mobileError.textContent = "Mobile must be 10 digits long";
          document.getElementById('mobile').style.border = "2px solid red";
        } else {
          try {
              const id = document.getElementById('id_update').value;
               fetch(`/checkavl?mobile=${encodeURIComponent(mobile)}&id=${encodeURIComponent(id)}`).then((response) => {
                   response.json().then((data) => {
                       if (data.available) {
                          mobileError.textContent = "This mobile is already in use.";
                          document.getElementById('mobile').style.border = "2px solid red";
                       } else {
                          mobileError.textContent = ""
                          document.getElementById('mobile').style.border = "";
                       }
                   })
                }).catch((err) => console.log(err));
            } catch (error) {
                console.error('Error checking email availability:', error);
            }
        }
      }

      function validateHeight() {
        const height = document.getElementById("height").value;
        const heightError = document.getElementById("heightError");

        if (!height) {
          heightError.textContent = "Height is required.";
          document.getElementById('height').style.border = "2px solid red";
        }else if(height.indexOf('.') >=0 && !/^\d\.\d$/.test(height)){
          heightError.textContent = "Height is invalid.";
          document.getElementById('height').style.border = "2px solid red";
        } 
        else if (height < 2 || height > 8.1) {
          heightError.textContent = "Height must be between 2 to 8 feet.";
          document.getElementById('height').style.border = "2px solid red";
        } else {
          heightError.textContent = "";
          document.getElementById('height').style.border = "";
        }
      }

      function validateBloodgroup() {
            const bloodgroupInput = document.getElementById('bloodgroup');
            const bloodgroupError = document.getElementById('bloodgroupError');
            const bloodgroup = bloodgroupInput.value;

            if (!bloodgroup) {
                bloodgroupError.textContent = 'Please select a blood group.';
                document.getElementById('bloodgroup').style.border = "2px solid red";
            } else {
                bloodgroupError.textContent = '';
                document.getElementById('bloodgroup').style.border = "";
            }
        }

      function validateGender() {
        const male = document.getElementById("male");
        const female = document.getElementById("female");
        const genderError = document.getElementById("genderError");

        if (!male.checked && !female.checked) {
          genderError.textContent = "Please select gender.";
          document.getElementById('male').style.border = "2px solid red";
          document.getElementById('female').style.border = "2px solid red";
        } else {
          genderError.textContent = "";
          document.getElementById('male').style.border = "";
          document.getElementById('female').style.border = "";
        }
      }

      function validatePassword() {
        const password = document.getElementById("password").value;
        const passwordError = document.getElementById("passwordError");

        if (password == "") {
          passwordError.textContent = "Password is required";
          document.getElementById('password').style.border = "2px solid red";
        } else if (!/^(?=.*\d)(?=.*[a-zA-Z]).{8,}$/.test(password)) {
          passwordError.textContent =
            "Password must be at least 8 characters long and contain a mix of letters and digits.";
          document.getElementById('password').style.border = "2px solid red";
        } else {
          passwordError.textContent = "";
          document.getElementById('password').style.border = "";
        }
      }

      function validateBirthdate() {
        const bdateInput = document.getElementById("bdate");
        const bdateError = document.getElementById("bdateError");
        const bdate = bdateInput.value;
        console.log("value of bdate >>>>>>",bdate);
        if (bdate == "") {
          bdateError.textContent = "Please select a birthdate.";
          document.getElementById('bdate').style.border = "2px solid red";
          return;
        } else {
          bdateError.textContent = "";
          document.getElementById('bdate').style.border = "";
          return;
        }
      }

      function validateForm() {
        validateGender();
        validateName();
        validateEmail();
        validateMobile();
        validateBloodgroup();
        validateHeight();
        validatePassword();
        validateBirthdate();

        const errorMessages = document.querySelectorAll(".text-danger");
        for (let errorMessage of errorMessages) {
          if (errorMessage.textContent !== "") {
            return false;
          }
        }

        return true;
      }

      function restrictInput(event) {
        const keyPressed = event.key;

        // Check if the key pressed is a digit (0-9) or the backspace key
        if (
          !/^\d$/.test(keyPressed) &&
          keyPressed !== "Backspace" &&
          keyPressed !== "ArrowLeft" &&
          keyPressed !== "ArrowRight"
        ) {
          event.preventDefault(); // Prevent non-numeric characters from being entered
        }
      }

      function restrictInputHegiht(event) {
        const keyPressed = event.key;

        if (
          !/^\d$/.test(keyPressed) &&
          keyPressed !== "Backspace" &&
          keyPressed !== "ArrowLeft" &&
          keyPressed !== "ArrowRight" &&
          keyPressed !== "."
        ) {
          event.preventDefault();
        }
      }

      function restrictInputName(event){
        const keyPressed = event.key;
        if(!/^[a-zA-Z]+$/.test(keyPressed) && keyPressed !== "ArrowLeft" && keyPressed !== "ArrowRight" )
        {
          event.preventDefault();
        }
      }

      // main function of update

      function handleUpdate(event) {
          event.preventDefault();
          const resValidate = validateForm();

          if (resValidate) {
            const id = document.getElementById('id_update').value;
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const  mobile = document.getElementById('mobile').value;
            const bloodgroup= document.getElementById('bloodgroup').value;
            const bdate = document.getElementById('bdate').value;
            const height = document.getElementById('height') .value;
            const password = document.getElementById('password').value;
            let gender;
            if (document.getElementById("male").checked) {
              gender = "male";
            } else if (document.getElementById("female").checked) {
              gender = "female";
            }


            const apiData = new FormData();
            apiData.append('id', id);
            apiData.append('name', name);
            apiData.append('email', email);
            apiData.append('mobile', mobile);
            apiData.append('bloodgroup', bloodgroup);
            apiData.append('gender', gender);
            apiData.append('bdate',bdate);
            apiData.append('height', height);
            apiData.append('password', password);

            fetch('/updatestud', {
                method: 'POST',
                body: apiData,
            })
            .then(response => response.json())
            .then(resData => {
                if(resData.success == true){
                  Swal.fire({
                      title: "success!",
                      text: "Student is Updated",
                      icon: "success"
                  }).then((data)=>{
                      if(data.isConfirmed){
                        location.replace("/view") 
                      }
                  })
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
          } 
          else {
            Swal.fire({
              icon: "error",
              title: "Oops...",
              text: "Please Field the correct details!",
          });
        }

        }

        
</script>
</html>